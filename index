<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Advanced Glitch Shader with Crack + Blend</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    html, body { margin: 0; overflow: hidden; background: black; }
    canvas { width: 100vw; height: 100vh; display: block; }
    #ui {
      position: fixed;
      top: 10px;
      left: 10px;
      background: rgba(0, 0, 0, 0.5);
      color: white;
      font-family: sans-serif;
      padding: 10px;
      border-radius: 6px;
      z-index: 2;
    }
    label { display: block; margin-top: 5px; font-size: 13px; }
    input[type=range] { width: 150px; }
  </style>
</head>
<body>
<canvas id="glitchCanvas"></canvas>
<div id="ui">
  <label>Glitch Strength: <input id="glitchStrength" type="range" min="0" max="1" step="0.01" value="0.5"></label>
  <label>FPS: <input id="fpsControl" type="range" min="1" max="60" value="12"></label>
</div>

<script id="fragShader" type="x-shader/x-fragment">
precision mediump float;

uniform float u_time;
uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_frameIndex;
uniform float u_nextFrameIndex;
uniform float u_blendFactor;
uniform float u_glitchAmount;
uniform bool u_hasSprite;
uniform sampler2D u_sprite;
uniform float u_crackTime;
uniform vec2 u_crackCenter;

float rand(vec2 co) {
  return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);
}

// Crack effect from center
float crackMask(vec2 uv, vec2 center, float time) {
  float d = distance(uv, center);
  float intensity = smoothstep(0.1, 0.0, d);
  float ring = sin(40.0 * d - time * 30.0);
  return intensity * ring * step(0.0, time);
}

void main() {
  vec2 uv = gl_FragCoord.xy / u_resolution.xy;
  vec2 center = u_mouse / u_resolution;

  float ripple = sin(distance(uv, center) * 40.0 - u_time * 5.0) * 0.01 * u_glitchAmount;
  float shift = 0.005 * u_glitchAmount + ripple;

  vec3 color;

  if (u_hasSprite) {
    float totalFrames = 36.0;
    float frameW = 1.0 / totalFrames;
    float idxA = mod(u_frameIndex, totalFrames);
    float idxB = mod(u_nextFrameIndex, totalFrames);

    vec2 uvA = uv;
    vec2 uvB = uv;
    uvA.x = uvA.x * frameW + idxA * frameW;
    uvB.x = uvB.x * frameW + idxB * frameW;

    vec3 colorA = vec3(
      texture2D(u_sprite, uvA + vec2(shift, 0)).r,
      texture2D(u_sprite, uvA).g,
      texture2D(u_sprite, uvA - vec2(shift, 0)).b
    );

    vec3 colorB = vec3(
      texture2D(u_sprite, uvB + vec2(shift, 0)).r,
      texture2D(u_sprite, uvB).g,
      texture2D(u_sprite, uvB - vec2(shift, 0)).b
    );

    color = mix(colorA, colorB, u_blendFactor);
  } else {
    color = vec3(
      sin(u_time + uv.x * 10.0) * 0.5 + 0.5,
      sin(u_time + uv.y * 20.0) * 0.5 + 0.5,
      sin(u_time * 2.0 + uv.x * 15.0) * 0.5 + 0.5
    );
  }

  float noise = rand(uv + u_time);
  color += 0.05 * noise * u_glitchAmount;

  float crack = crackMask(uv, u_crackCenter, u_crackTime);
  color += vec3(crack, crack * 0.2, crack * 0.1);

  gl_FragColor = vec4(color, 1.0);
}
</script>

<script>
const canvas = document.getElementById("glitchCanvas");
const gl = canvas.getContext("webgl");
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

const glitchSlider = document.getElementById("glitchStrength");
const fpsSlider = document.getElementById("fpsControl");

// Compile shaders and program
function compileShader(type, src) {
  const s = gl.createShader(type);
  gl.shaderSource(s, src);
  gl.compileShader(s);
  if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) throw new Error(gl.getShaderInfoLog(s));
  return s;
}
const vs = compileShader(gl.VERTEX_SHADER, `attribute vec4 a_position; void main() { gl_Position = a_position; }`);
const fs = compileShader(gl.FRAGMENT_SHADER, document.getElementById("fragShader").textContent);
const prog = gl.createProgram();
gl.attachShader(prog, vs);
gl.attachShader(prog, fs);
gl.linkProgram(prog);
gl.useProgram(prog);

// Set up rectangle
const posBuf = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, posBuf);
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1,-1, 1,-1, -1,1, 1,-1, 1,1, -1,1]), gl.STATIC_DRAW);
const posLoc = gl.getAttribLocation(prog, "a_position");
gl.enableVertexAttribArray(posLoc);
gl.vertexAttribPointer(posLoc, 2, gl.FLOAT, false, 0, 0);

// Uniforms
const u_time = gl.getUniformLocation(prog, "u_time");
const u_resolution = gl.getUniformLocation(prog, "u_resolution");
const u_mouse = gl.getUniformLocation(prog, "u_mouse");
const u_frameIndex = gl.getUniformLocation(prog, "u_frameIndex");
const u_nextFrameIndex = gl.getUniformLocation(prog, "u_nextFrameIndex");
const u_blendFactor = gl.getUniformLocation(prog, "u_blendFactor");
const u_glitchAmount = gl.getUniformLocation(prog, "u_glitchAmount");
const u_hasSprite = gl.getUniformLocation(prog, "u_hasSprite");
const u_sprite = gl.getUniformLocation(prog, "u_sprite");
const u_crackTime = gl.getUniformLocation(prog, "u_crackTime");
const u_crackCenter = gl.getUniformLocation(prog, "u_crackCenter");

// Input State
let mouse = [canvas.width / 2, canvas.height / 2];
let crackTimer = 0;
let crackCenter = [0, 0];
canvas.addEventListener("mousemove", e => mouse = [e.clientX, canvas.height - e.clientY]);
canvas.addEventListener("touchmove", e => {
  if (e.touches.length) mouse = [e.touches[0].clientX, canvas.height - e.touches[0].clientY];
});
canvas.addEventListener("mousedown", e => {
  crackTimer = 1.0;
  crackCenter = [e.clientX / canvas.width, 1.0 - e.clientY / canvas.height];
});
canvas.addEventListener("touchstart", e => {
  if (e.touches.length) {
    crackTimer = 1.0;
    crackCenter = [e.touches[0].clientX / canvas.width, 1.0 - e.touches[0].clientY / canvas.height];
  }
});

// Texture loading
const texture = gl.createTexture();
gl.bindTexture(gl.TEXTURE_2D, texture);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
let spriteLoaded = false;
const img = new Image();
img.crossOrigin = "anonymous";
img.src = "https://ipfs.io/ipfs/bafybeif2w45idnidckunfp2yp7o6vezc4zejbgc7ylfrpxfz6qyjj4hboi";
img.onload = () => {
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
  spriteLoaded = true;
};

// Animation loop
let lastTime = performance.now();
let accTime = 0;
function draw(now) {
  let dt = (now - lastTime) / 1000;
  lastTime = now;
  accTime += dt;

  gl.viewport(0, 0, canvas.width, canvas.height);

  let t = accTime;
  const fps = parseFloat(fpsSlider.value);
  const glitch = parseFloat(glitchSlider.value);
  const frameFloat = t * fps;
  const frameIdx = Math.floor(frameFloat);
  const blend = frameFloat - frameIdx;

  if (crackTimer > 0) crackTimer -= dt;

  gl.uniform1f(u_time, t);
  gl.uniform1f(u_frameIndex, frameIdx);
  gl.uniform1f(u_nextFrameIndex, frameIdx + 1);
  gl.uniform1f(u_blendFactor, blend);
  gl.uniform2f(u_resolution, canvas.width, canvas.height);
  gl.uniform2f(u_mouse, mouse[0], mouse[1]);
  gl.uniform1f(u_glitchAmount, glitch);
  gl.uniform1i(u_hasSprite, spriteLoaded ? 1 : 0);
  gl.uniform1f(u_crackTime, crackTimer);
  gl.uniform2f(u_crackCenter, crackCenter[0], crackCenter[1]);

  gl.activeTexture(gl.TEXTURE0);
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.uniform1i(u_sprite, 0);

  gl.drawArrays(gl.TRIANGLES, 0, 6);
  requestAnimationFrame(draw);
}
requestAnimationFrame(draw);
</script>
</body>
</html>
